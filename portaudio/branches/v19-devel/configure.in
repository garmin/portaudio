dnl
dnl portaudio V19 configure.in script
dnl
dnl Dominic Mazzoni
dnl

dnl Require autoconf >= 2.13
AC_PREREQ(2.13)

dnl Init autoconf and make sure configure is being called
dnl from the right directory
AC_INIT([pa_common/portaudio.h])

dnl Checks for programs.
AC_PROG_CC
AC_PROG_RANLIB
AC_PROG_INSTALL
AC_PATH_PROG(AR, ar, no)
if [[ $AR = "no" ]] ; then
    AC_MSG_ERROR("Could not find ar - needed to create a library");
fi

dnl This must be one of the first tests we do or it will fail...
AC_C_BIGENDIAN

dnl extra variables
AC_SUBST(OTHER_OBJS)
AC_SUBST(PADLL)
AC_SUBST(SHARED_FLAGS)
AC_SUBST(DLL_LIBS)
AC_SUBST(CXXFLAGS)
AC_SUBST(NASM)
AC_SUBST(NASMOPT)

dnl checks for various host APIs and arguments to configure that
dnl turn them on or off

AC_CHECK_LIB(asound, snd_pcm_open, have_alsa=yes, have_alsa=no)

PKG_CHECK_MODULES(JACK, jack, have_jack=yes, have_jack=no)

AC_ARG_WITH(alsa, 
            [  --with-alsa (default=auto)],
            with_alsa=$withval, with_alsa="yes")

AC_ARG_WITH(jack, 
            [  --with-jack (default=auto)],
            with_jack=$withval, with_jack="yes")

AC_ARG_WITH(oss, 
            [  --with-oss (default=yes)],
            with_oss=$withval, with_oss="yes")

AC_ARG_WITH(host_os, 
            [  --with-host_os (no default)],
            host_os=$withval)

AC_ARG_WITH(winapi,
            [  --with-winapi ((wmme/directx/asio) default=wmme)],
            with_winapi=$withval, with_winapi="wmme")

dnl Mac API added for ASIO, can have other api's listed
AC_ARG_WITH(macapi,
            [  --with-macapi (asio) default=asio)],
            with_macapi=$withval, with_macapi="asio")

AC_ARG_WITH(asiodir,
            [  --with-asiodir (default=/usr/local/asiosdk2)],
            with_asiodir=$withval, with_asiodir="/usr/local/asiosdk2")

AC_ARG_WITH(calliasiodir,
            [  --with-calliasiodir (default=./calliasio)],
            with_calliasiodir=$withval, with_calliasiodir="./calliasio")

AC_ARG_WITH(nasm,
            [  --with-nasm (checks path for nasm or nasmw],
            with_nasm=$withval, with_nasm="")

AC_ARG_WITH(dxdir,
            [  --with-dxdir (default=/usr/local/dx7sdk)],
            with_dxdir=$withval, with_dxdir="/usr/local/dx7sdk")

CFLAGS="-g -O2 -Wall"

if [[ $ac_cv_c_bigendian = "yes" ]] ; then
   CFLAGS="$CFLAGS -DPA_BIG_ENDIAN"
else
   CFLAGS="$CFLAGS -DPA_LITTLE_ENDIAN"
fi

case "${host_os}" in
  darwin* )
	dnl Mac OS X configuration

	OTHER_OBJS="pa_mac_core/pa_mac_core.o";
	LIBS="-framework AudioUnit -framework AudioToolbox -framework CoreAudio";
	PADLL="libportaudio.dylib";
	SHARED_FLAGS="-framework AudioUnit -framework AudioToolbox";
	SHARED_FLAGS="$SHARED_FLAGS -framework CoreAudio -dynamiclib";
dnl	Not sure if nasm is needed with Darwin and what flags (-f win32 on Windows)
        if [[ $with_macapi = "asio" ]] ; then
            if [[ $with_nasm ]] ; then
                NASM=$with_nasm;
            else
                AC_PATH_PROG(NASM, nasm, no)
                if [[ $NASM = "no" ]] ; then
                    AC_MSG_ERROR("Could not find nasm or nasmw- needed for ASIO")
                fi
                NASMOPT=  ;
            fi
            NASMOPT=  ;

            if [[ $with_asiodir ]] ; then
              ASIODIR="$with_asiodir";
            else
              ASIODIR="/usr/local/asiosdk2";
            fi
            echo "ASIODIR: $ASIODIR";

            if [[ $with_calliasiodir ]] ; then
              CALLIASIODIR="$with_calliasiodir";
            else
              CALLIASIODIR="./calliasio";
            fi
            echo "CALLIASIODIR: $CALLIASIODIR";

            OTHER_OBJS="$CFLAGS $ASIODIR/host/asiodrivers.o $ASIODIR/host/mac/asioshlib.o";
            #OTHER_OBJS="$CFLAGS $ASIODIR/host/asiodrivers.o $ASIODIR/host/mac/asioshlib.o $CALLIASIODIR/asio.o $CALLIASIODIR/calliasio_gcc.o $CALLIASIODIR/calls.o";
            CFLAGS="$CFLAGS -Ipa_asio -I$ASIDIR/host/mac -I$ASIODIR/common";
            CXXFLAGS="$CFLAGS";
        fi
	;;

  mingw* )
        dnl MingW configuration

        echo "WINAPI: $with_winapi"
        if [[ $with_winapi = "directx" ]] ; then
            if [[ $with_dxdir ]] ; then
              DXDIR="$with_dxdir";
            else
              DXDIR="/usr/local/dx7sdk";
            fi
            echo "DXDIR: $DXDIR"
            OTHER_OBJS="pa_win_ds/pa_win_ds.o pa_win_ds/dsound_wrapper.o pa_win/pa_win_hostapis.o pa_win/pa_win_util.o";
            LIBS="-lwinmm -lm -ldsound -lole32";
            PADLL="portaudio.dll";
            SHARED_FLAGS="-shared -mthreads";
            DLL_LIBS="-lwinmm -lm -L./dx7sdk/lib -ldsound -lole32";
            #VC98="\"/c/Program Files/Microsoft Visual Studio/VC98/Include\"";
            #CFLAGS="$CFLAGS -I$VC98 -DPA_NO_WMME -DPA_NO_ASIO";
            CFLAGS="$CFLAGS -Ipa_common -I$DXDIR/include -DPA_NO_WMME -DPA_NO_ASIO";
        elif [[ $with_winapi = "asio" ]] ; then
            if [[ $with_nasm ]] ; then
                NASM=$with_nasm
                NASMOPT="-f win32"
            else
                AC_PATH_PROG(NASM, nasm, no)
                if [[ $NASM = "no" ]] ; then
                    AC_PATH_PROG(NASM, nasmw, no)
                    if [[ $NASM = "no" ]] ; then
                        AC_MSG_ERROR("Could not find nasm or nasmw- needed for ASIO")
                    fi
                fi
                NASMOPT="-f win32"
            fi

            if [[ $with_asiodir ]] ; then
              ASIODIR="$with_asiodir";
            else
              ASIODIR="/usr/local/asiosdk2";
            fi
            echo "ASIODIR: $ASIODIR"

            if [[ $with_calliasiodir ]] ; then
              CALLIASIODIR="$with_calliasiodir";
            else
              CALLIASIODIR="./calliasio";
            fi
            echo "CALLIASIODIR: $CALLIASIODIR";

            #OTHER_OBJS="pa_asio/pa_asio.o pa_win/pa_win_hostapis.o pa_win/pa_win_util.o $ASIODIR/common/asio.o $ASIODIR/common/asiodrvr.o $ASIODIR/common/combase.o $ASIODIR/common/debugmessage.o $ASIODIR/common/dllentry.o $ASIODIR/common/register.o $ASIODIR/host/ASIOConvertSamples.o $ASIODIR/host/asiodrivers.o $ASIODIR/host/pc/asiolist.o";
            OTHER_OBJS="pa_asio/pa_asio.o pa_win/pa_win_hostapis.o pa_win/pa_win_util.o $ASIODIR/host/asiodrivers.o $ASIODIR/host/pc/asiolist.o $CALLIASIODIR/asio.o $CALLIASIODIR/calliasio_gcc.o $CALLIASIODIR/calls.o";
            LIBS="-lwinmm -lm -lstdc++ -lole32 -luuid";
            PADLL="portaudio.dll";
            SHARED_FLAGS="-shared -mthreads";
            DLL_LIBS="-lwinmm -lm -lstdc++ -lole32 -luuid";
            #CFLAGS="$CFLAGS -Ipa_asio -I$ASIODIR/common -I$ASIODIR/host -I$ASIODIR/host/pc -DPA_NO_WMME -DPA_NO_DS -DWINDOWS";
            CFLAGS="$CFLAGS -ffast-math -fomit-frame-pointer -Ipa_common -Ipa_asio -I$ASIODIR/host/pc -I$ASIODIR/common -I$ASIODIR/host -DPA_NO_WMME -DPA_NO_DS -DWINDOWS";
            CXXFLAGS="$CFLAGS";
        else   # WMME default
            OTHER_OBJS="pa_win_wmme/pa_win_wmme.o pa_win/pa_win_hostapis.o pa_win/pa_win_util.o";
            LIBS="-lwinmm -lm -lstdc++ -lole32 -luuid";
            PADLL="portaudio.dll";
            SHARED_FLAGS="-shared -mthreads";
            DLL_LIBS="-lwinmm";
            CFLAGS="$CFLAGS -Ipa_common -DPA_NO_DS -DPA_NO_ASIO";
        fi
        ;;

  cygwin* )
	dnl Cygwin configuration

	OTHER_OBJS="pa_win_wmme/pa_win_wmme.o";
	LIBS="-lwinmm -lm";
	PADLL="portaudio.dll";
	SHARED_FLAGS="-shared -mthreads";
	DLL_LIBS="-lwinmm";
	;;

  *)
	dnl Unix OSS configuration

   AC_CHECK_LIB(pthread, pthread_create,
                ,
                AC_MSG_ERROR([libpthread not found!]))

	if [[ $have_alsa = "yes" ] && [ $with_alsa != "no" ]] ; then
                LIBS="$LIBS -lasound"
		OTHER_OBJS="$OTHER_OBJS pa_linux_alsa/pa_linux_alsa.o"
		OTHER_OBJS="$OTHER_OBJS pa_linux_alsa/callback_thread.o"
		OTHER_OBJS="$OTHER_OBJS pa_linux_alsa/blocking_calls.o"
                AC_DEFINE(PA_USE_ALSA)
	fi

	if [[ $have_jack = "yes" ] && [ $with_jack != "no" ]] ; then
   	LIBS="$LIBS $JACK_LIBS"
		CFLAGS="$CFLAGS $JACK_CFLAGS"
		OTHER_OBJS="$OTHER_OBJS pa_jack/pa_jack.o"
                AC_DEFINE(PA_USE_JACK)
	fi

	if [[ $with_oss != "no" ]] ; then
		OTHER_OBJS="$OTHER_OBJS pa_unix_oss/pa_unix_oss.o"
		AC_DEFINE(PA_USE_OSS)
	fi
	LIBS="$LIBS -lm -lpthread";
	PADLL="libportaudio.so";
	SHARED_FLAGS="-shared";

        OTHER_OBJS="$OTHER_OBJS pa_unix/pa_unix_hostapis.o pa_unix/pa_unix_util.o"
esac

AC_OUTPUT([Makefile])
